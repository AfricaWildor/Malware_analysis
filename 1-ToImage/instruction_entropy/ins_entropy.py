import math
import numpy as np
from PIL import Image, ImageDraw

# 指令熵
def instruction_entropy(ins_list, sliding_window):
	d = int(len(ins_list) / sliding_window)
	m = []
	for i in range(d):
		base = i * sliding_window
		window = ins_list[base:base + sliding_window]
		count = {}  # 空字典
		for j in window:
			j = j[:len(j)-1]
			count[j] = count.get(j, 0) + (1 / len(window))
		entro = []
		for a in count.values():
			entro.append(a)
		result = 0
		for x in entro:
			result += (-x) * math.log(x, 2)
		m.append(result)
	return m


with open('../../0-MalwareDownload_API/sample/njrat1.asm') as f:
	ins_list = f.readlines()
	print(len(ins_list))
	ie = instruction_entropy(ins_list, 101)
	print(len(ie))
	rate = math.ceil(255 / math.log(101, 2))
	ie = [x*rate for x in ie]
	# print(ie)
	data = np.array(ie, dtype=int).reshape((73, 24))
	# print(data)

	img = Image.new('L', (73, 24))
	draw = ImageDraw.Draw(img)
	for i in range(73):
		for j in range(24):
			draw.point((i, j), int(data[i][j]))

	img.save('./test.png')