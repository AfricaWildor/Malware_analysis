import string
import time

from PIL import Image, ImageDraw

import hilbert


def byte_match(c):
	if c == 0:
		return tuple([0, 0, 0])
	elif c == 255:
		return tuple([255, 255, 255])
	elif chr(c) in string.printable:
		return tuple([55, 126, 184])
	elif c < 32:
		return tuple([131, 255, 98])
	return tuple([228, 26, 28])


if __name__ == '__main__':
	pass
	# hc = hilbert.HilbertCurve(10)
	# hc.marshel()

	# st = time.time()
	#
	#
	#
	# n = 9
	# dim = 2 ** n
	#
	# with open("./LOIC.exe", mode="rb") as d:
	# 	s = d.read(dim * dim)
	#
	# c = Image.new("RGB", (dim, dim))
	# id = ImageDraw.Draw(c)
	#
	# hc = hilbert.HilbertCurve(10)
	#
	# for i in range(dim):
	# 	for j in range(dim):
	# 		index = hc.init_mat[i][j]
	# 		if index < len(s):
	# 			id.point((i, j), byte_match(s[index]))
	# 		else:
	# 			id.point((i, j), byte_match(255))
	# c.save("./test.png")
	#
	# et = time.time()
	#
	# print("time consuming:", et - st)
