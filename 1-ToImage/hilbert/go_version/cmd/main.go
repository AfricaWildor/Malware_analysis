package main

import (
	hilbertcurve "binHilbert/hilbert_curve"
	"fmt"
	"image"
	"image/color"
	"image/png"
	"math"
	"os"
)



func ByteMatch(b byte) color.RGBA {
	switch {
	case b == 0:
		return color.RGBA{0, 0, 0, 255}
	case b == 255:
		return color.RGBA{255, 255, 255, 255}
	case b < 32:
		return color.RGBA{131, 255, 98, 255}
	case b >= 32 && b <= 127:
		return color.RGBA{55, 126, 184, 255}
	default:
		return color.RGBA{228, 26, 28, 255}
	}
} 

func main() {

	

	bin, err := os.ReadFile("./LOIC.exe")
	if err != nil {
		fmt.Println("input:", err)
		return
	}

	n := 9
	d := int(math.Pow(2, float64(n)))

	hc := hilbertcurve.New(10)
	// fmt.Println(hc.Formatted())
	r := image.NewRGBA(image.Rect(0, 0, d, d))
	for i := 0; i < d; i++ {
		for j := 0; j < d; j++ {
			index := hc.At(i, j)
			if index < len(bin) {
				c := ByteMatch(bin[index])
				r.SetRGBA(i, j, c)
			} else {
				c := ByteMatch(255)
				r.SetRGBA(i, j, c)
			}
		}
	}

	output, _ := os.Create("./test.png") 

	err2 := png.Encode(output, r)
	if err2 != nil{
		fmt.Println("output:", err2)
		return
	}

}