from PIL import Image, ImageDraw
import os, sys, array, math
import numpy as np
import cv2


def markov_matrix(file_bytes):
	buffer = array.array('B', file_bytes)

	array1 = np.zeros((256, 256), dtype=int)
	for i in range(len(buffer) - 2):
		j = i + 1
		array1[buffer[i]][buffer[j]] += 1

	turn_array = np.zeros(256, dtype=int)
	for i in range(256):
		for j in range(256):
			turn_array[i] += array1[i][j]

	array2 = np.zeros((256, 256), dtype=int)
	for i in range(256):
		for j in range(256):
			if turn_array[i] != 0:
				array2[i][j] = math.ceil((array1[i][j] / turn_array[i]) * 255)

	return array2


bytes_list = b''
line = 0
with open('./cNVsL894lE1fh3wDPyKu.bytes', mode="r") as f:
	for l in f:
		if l.find("?") >= 0:
			continue
		str_list = l.split(" ")[1:]
		b = bytes.fromhex("".join(str_list))
		bytes_list += b
		line = line + 1
		if line == 4096:
			break
mm = markov_matrix(bytes_list)
print(mm)
# Image.fromarray(mm.astype("uint8")).save('./mark.png')

# img = cv2.imread('./mark.png', cv2.IMREAD_GRAYSCALE)
img = mm.astype('uint8')
# print(img)
kernel = np.ones((9, 9), np.uint8)
dilation = cv2.dilate(img, kernel)
print(dilation)
# opening = cv2.morphologyEx(img, cv2.MORPH_BLACKHAT, kernel)
cv2.imwrite('./mark_dilate.png', dilation)
