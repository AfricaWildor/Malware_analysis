import math
import os

import numpy as np
from PIL import Image, ImageDraw

arr = np.load("./hilbert.npy")
dim = 256

sliding_window = 64

# 读文件
bytes_list = b''
line = 0
with open("./0csgzpwdL3FbZEJu6DjO.bytes", mode="r") as f:
	for l in f:
		if l.find("?") >= 0:
			continue
		str_list = l.split(" ")[1:]
		b = bytes.fromhex("".join(str_list))
		bytes_list += b
		line = line + 1
		if line == 4096:
			break

def entropy_map(file_bytes):
	d = int(len(file_bytes) / sliding_window)
	m = []
	for i in range(d):
		base = i * sliding_window
		window = file_bytes[base:base+sliding_window]
		count = {}  # 空字典
		for j in window:
			count[j] = count.get(j, 0) + (1 / len(window))
		entro = []
		for a in count.values():
			entro.append(a)
		result = 0
		for x in entro:
			result += (-x) * math.log(x, 2)
		for j in range(sliding_window):
			m.append(result * 42)
	return m


m = entropy_map(bytes_list)

c = Image.new("L", (dim, dim))
draw = ImageDraw.Draw(c)
for i in range(dim):
	for j in range(dim):
		# 重复填充
		index = arr[i][j] % len(m)
		draw.point((i, j), int(m[index]))

c.save("./entropy1.png")
