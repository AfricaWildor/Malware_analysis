import os
import sys

import torch
from torch import nn

import tool
from source import *
from Visualization import rgb_hil
from Model import final


class Classification(nn.Module):
	def __init__(self):
		super(Classification, self).__init__()
		self.tanh = nn.Tanh()
		self.hidden = nn.Linear(57, 8)
		# self.first = nn.Linear(32, 4)
		self.output = nn.Linear(8, 1)
		self.sigmoid = nn.Sigmoid()

	def forward(self, x):
		x = self.hidden(x.to(torch.float32))
		x = self.tanh(x)
		# x = self.first(x)
		# x = self.tanh(x)
		x = self.output(x)
		x = self.sigmoid(x)
		return x

# 检测exe
def detect(path, raw):
	bytes_file_path = path + '.bytes'
	img_file_path = path + '.png'

	s = Source(raw)
	if s.text_exists:
		print(s.ins_entropy)
	else:
		print(s.shell)
	write_byte(bytes_file_path, s.raw_without_header)
	gen_rgb_hil(img_file_path, s.raw_without_header)

	tensor = final.getTensor(img_file_path)
	res = final.two_classify(tensor)
	if res:
		print('是病毒')
	else:
		print('啥也不是')
	print('类型为: ', final.get_type(tensor))

# .bytes
def write_byte(path, raw):
	s = Source(raw)
	tool.write_file(path, s.raw_without_header.hex())

# 生成图
def gen_rgb_hil(path, raw):
	s = Source(raw)
	rgb_hil.generate(s.raw_without_header, path)

# 获取指令熵
def get_ins_entropy(raw):
	s = Source(raw)
	if s.text_exists:
		print(s.ins_entropy)
	else:
		print(s.shell)

# 判断一张图片
def detect_img(path):
	tensor = final.getTensor(path)
	res = final.two_classify(tensor)
	if res:
		print('是病毒')
	else:
		print('啥也不是')

	print('类型为: ', final.get_type(tensor))


if __name__ == '__main__':
	pass

