from __future__ import print_function
import sys

from capstone import *
from elftools.elf.elffile import ELFFile

def elf_view(filename):
	print('In file:', filename)
	with open(filename, 'rb') as f:
		elf = ELFFile(f)
		print(elf.header)
		for section in elf.iter_sections():
			print(hex(section['sh_addr']) + ' ' + section.name)

def elf2section(elf):
	for section in elf.iter_sections():
		if section.name.startswith('.text'):
			return section

def elf2asm_code(filename):

	with open(filename, 'rb') as f:
		elf = ELFFile(f)
		text_section=elf2section(elf)
		begin=text_section['sh_addr']
		data = text_section.data()

	md = Cs(CS_ARCH_X86, CS_MODE_64)
	md.detail = True
	asm_code = ''  # store the o
	# parse code section and disassemble it
	for i in md.disasm(data, begin):
		asm_code += (f'{i.mnemonic}\r\n')
		print(f'0x{i.address} {asm_code} {i.op_str}')
		last_address = int(i.address)
		last_size = i.size
	return asm_code

def elf2asmfile(filepath):
	asm_code=elf2asm_code(filepath)
	bytes_filepath = filepath+ '.asm'
	print(bytes_filepath)
	with open(bytes_filepath, 'wb') as file:
		file.write(bytes(asm_code, 'utf-8'))
		print(f'write in {bytes_filepath}')

if __name__ == '__main__':
	filepath = 'sample/bubbleSortBcf'
	# elf_view(filepath)
	elf2asmfile(filepath)
